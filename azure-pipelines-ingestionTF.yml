# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - group: TFvars

stages:
  - stage: TerraformInstall
    displayName: Install Terraform
    jobs:
      - job: TFinstall
        displayName: Install Terraform
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'

  - stage: TerraformInitandPlan
    displayName: Terraform Init and Plan
    jobs:
      - job: TFinitandPlan
        displayName: Terraform Init and Plan
        steps:
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: 'terraform'
              backendServiceArm: 'Ivy Dev Data Platform'
              backendAzureRmResourceGroupName: 'rg-ivydataplatform-prod-eastus'
              backendAzureRmStorageAccountName: 'stivylakehouseprod'
              backendAzureRmContainerName: 'ivy-tf-container'
              backendAzureRmKey: 'terraform.tfstate'

      - job: TFPlan
        displayName: Terraform Plan
        steps:
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: 'terraform'
              environmentServiceNameAzureRM: 'Ivy Dev Data Platform'
              commandOptions: '-input=true -var account=$(account) -var password=$(pass) -var region=$(region) -var username=$(user)'
          
  - stage: TerraformApply
    displayName: Terraform Apply
    jobs:
      - job: TFApply
        displayName: Terraform Apply
        steps:
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: 'terraform'
              environmentServiceNameAzureRM: 'Ivy Dev Data Platform'
              commandOptions: '-input=true'
